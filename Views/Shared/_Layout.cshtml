<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - TheVoid</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/TheVoid.styles.css" asp-append-version="true" />
</head>
<body>
    <div id="main-body-void">
        <audio id="background-audio" src="~/Assets/Sounds/backgroundNoise.mp3" loop="loop" preload="auto"></audio>
        <h1 id="main-title" class="text-white"><b class="text-center">The Void</b></h1>
        <div class="container">
            <main role="main">
                @RenderBody()
                <partial name="_AccountPartial" />
            </main>
        </div>
        <h1 id="main-description" class="text-white fs-2 fw-bold ">Throw your problems in the void</h1>
    </div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    @await RenderSectionAsync("Scripts", required: false)
</body>

</html>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        var sound = document.getElementById("background-audio");
        sound.play();
    });
</script>

@*         
Flex Container (d-flex, d-inline-flex):
d-flex: This class makes an element a flex container, which enables it to use Flexbox properties to arrange its children. It changes the display property to display: flex;.
d-inline-flex: Similar to d-flex, but makes the element an inline flex container, allowing it to behave like an inline-level element while still utilizing Flexbox.
Flex Direction (flex-row, flex-column, flex-row-reverse, flex-column-reverse):

These classes control the direction in which flex items are placed within the flex container:
flex-row: Items are placed in a horizontal row (default).
flex-column: Items are placed in a vertical column.
flex-row-reverse: Items are placed in a horizontal row, but in reverse order.
flex-column-reverse: Items are placed in a vertical column, but in reverse order.
Justify Content (justify-content-*):

These classes align flex items along the main axis (horizontal axis for flex-row and vertical axis for flex-column):
justify-content-start: Items are packed toward the start of the flex container.
justify-content-end: Items are packed toward the end.
justify-content-center: Items are centered within the flex container.
justify-content-between: Items are evenly distributed with the first item at the start and the last item at the end.
justify-content-around: Items are evenly distributed with equal space around them.
Align Items (align-items-*):

These classes align flex items along the cross axis (perpendicular to the main axis):
align-items-start: Items are aligned at the start of the cross axis.
align-items-end: Items are aligned at the end.
align-items-center: Items are centered along the cross axis.
align-items-baseline: Items are aligned such that their baselines align.
align-items-stretch: Items are stretched to fill the container along the cross axis.
Align Self (align-self-*):

Similar to align-items-*, but applies alignment to individual flex items instead of the entire container.
Flex Wrap (flex-wrap, flex-nowrap, flex-wrap-reverse):

These classes control whether flex items wrap onto multiple lines or stay on a single line:
flex-wrap: Allows items to wrap onto multiple lines if needed.
flex-nowrap: Ensures items stay on a single line (default).
flex-wrap-reverse: Allows items to wrap onto multiple lines in reverse order.
Flex Grow, Shrink, and Basis (flex-grow-*, flex-shrink-*, flex-basis-*):

These classes allow you to control how flex items grow, shrink, and behave in terms of their initial size within the flex container. 
*@