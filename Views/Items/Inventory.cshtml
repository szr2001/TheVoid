@using TheVoid.ViewModels.Items;
@model InventoryVM

@{
    ViewData["Title"] = "Inventory";
}
<div class="d-flex expandFast justify-content-center align-items-center">
    <div class="p-1 align-center w-75">
        <div class="d-flex flex-row">
            @if(Model.SelectedItem != null)
            {
                <div class="justify-content-center min-width-200 w-50 align-items-center">
                    <div class="card p-1 d-flex align-items-center bg-dark border-white">
                        <img class="align-content-center m-1 w-25 h-25 img-fluid" src="@Model.SelectedItem.IconPath" />
                        <h3 class="text-white align-content-center">@Model.SelectedItem.Name</h3>
                        <label class="text-primary align-content-center">@Model.SelectedItem.Rarity.ToString()</label>
                        <h8 class="text-white align-content-center">@Model.SelectedItem.Description</h8>
                        <div class="d-flex flex-row">
                            @foreach(var option in Model.SelectedItem.Options)
                            {
                                @await Html.PartialAsync("_ItemOptionBtnPartial", new ItemOptionVM() { Option = option, Type = Model.SelectedItem.Type });
                            }
                        </div>
                    </div>
                </div>
            }

            <div class="justify-content-center align-items-center">
                <div class="card p-1 flex-row bg-dark border-white">
                    <div class="container max-height-500 min-height-222 overflow-auto m-1 justify-content-center align-items-center">
                        @{
                            if(Model.Items != null)
                            {
                                int rows = 6;
                                var items = Model.Items.ToList();
                                int rowCount = (int)Math.Ceiling((double)items.Count / rows);
                                for (int i = 0; i < rowCount; i++)
                                {
                                    <div class="row">
                                        @for (int j = 0; j < rows; j++)
                                        {
                                            <div class="col p-1">
                                                @{
                                                    int slotIndex = i * rows + j;
                                                    if (slotIndex < items.Count)
                                                    {
                                                        @await Html.PartialAsync("_InventorySlotPartial", items[slotIndex], new ViewDataDictionary(ViewData) { { "slotid", slotIndex }, {"invid", Model} })
                                                    }
                                                }
                                            </div>
                                        }
                                    </div>
                                }
                            }
                        }
                    </div>
                </div>
            </div>
        
        </div>
    </div>
</div>